private static string strConn = @"Data Source=" + serverName + ";"
                                                  + "Initial Catalog=" + database + ";"
                                                  + "User ID =" + id + ";"
                                                  + "Password =" + pass;

//Hàm load dữ liệu từ CSDL
        public DataTable Select_Data(string sql)
        {
            open();
            SqlCommand cmd = new SqlCommand(sql, Connect);
            SqlDataAdapter ad = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();//Chứa dữ liệu bảng
            ad.Fill(dt);
            close();
            return dt;
        }
//Hàm load dữ liệu từ CSDL với điều kiện
        //->sql: câu lệnh query,
        //->name: mảng chuỗi gồm tên cột,
        //->values: điều kiện của từng tên cột,
        //->parameter: số lượng parameter (số cột điều kiện)
        public DataTable Select_DataWithParameter(string sql, string[] name, object[] values, int parameter)
        {
            open();
            SqlCommand cmd = new SqlCommand(sql, Connect);
            //Add từng values của điều kiện cột (name[i]) tương ứng
            for (int i = 0; i < parameter; i++)
            {
                cmd.Parameters.AddWithValue(name[i], values[i]);
            }
            SqlDataAdapter ad = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            ad.Fill(dt);
            close();
            return dt;
        }

//Hàm Excute để insert, Update, Delete
        //-> sql: câu query
        //-> name[]: Chuỗi parameter tương ứng khi insert, update, delete
        public int Execute(string sql, string[] name, object[] values, int parameter)
        {
            try
            {
                open();
                SqlCommand cmd = new SqlCommand(sql, Connect);
                for (int i = 0; i < parameter; i++)
                {
                    cmd.Parameters.AddWithValue(name[i], values[i]);
                }
                int kq = cmd.ExecuteNonQuery();
                close();
                return kq;
            }
            catch
            {
                //Thêm thất bại
                close();
                return -1;
            }
        }
//Hàm Excute để insert, Update, Delete sử dụng procedure
        public int ExecuteUsProcedure(string sql, string[] name, object[] values, int parameter)
        {
            try
            {
                open();
                SqlCommand cmd = new SqlCommand(sql, Connect);
                cmd.CommandType = CommandType.StoredProcedure;
                for (int i = 0; i < parameter; i++)
                {
                    cmd.Parameters.AddWithValue(name[i], values[i]);
                }
                int kq = cmd.ExecuteNonQuery();
                close();
                return kq;
            }
            catch
            {
                //Thêm thất bại
                close();
                return -1;
            }
        }
//Hàm trả về 1 giá trị kiểu int từ CSDL
        public int ReturnInteger(string sql)
        {
            open();
            SqlCommand cmd = new SqlCommand(sql, Connect);
            int ValuesInteger = int.Parse(cmd.ExecuteScalar().ToString());
            close();
            return ValuesInteger;
        }
//Hàm trả về 1 giá trị kiểu int từ CSDL có parameter
        public int ReturnIntegerWithParameter(string sql, string[] name, object[] values, int parameter)
        {
            open();
            SqlCommand cmd = new SqlCommand(sql, Connect);
            for (int i = 0; i < parameter; i++)
            {
                cmd.Parameters.AddWithValue(name[i], values[i]);
            }
            int ValuesInteger = int.Parse(cmd.ExecuteScalar().ToString());
            close();
            return ValuesInteger;
        }